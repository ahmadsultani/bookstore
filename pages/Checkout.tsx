import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { GetServerSideProps } from "next";

import Cookies from "js-cookie";
import { toast } from "react-toastify";

import Navbar from "@/components/organisms/Navbar";
import { CheckoutTypes } from "@/types";
import { checkout } from "@/service/user";

export default function Checkout(props: CheckoutTypes) {
  const { book, requestedQty } = props;
  const router = useRouter();

  const shadow = "shadow-[0_3px_5px_2px_rgba(0,0,0,0.2)]";
  const labelStyle = "text-[20px] font-bold";
  const contentStyle =
    "line-clamp-2 overflow-ellipsis text-[15px] max-w-[300px]";
  const buttonSizing =
    "rounded-sm border-primary duration-[200ms] border-solid border-[1px] w-[150px] py-[15px] flex justify-center items-center text-[20px]";

  const handleCancelCheckout = () => {
    toast("Checkout cancelled :(", { type: "info" });
    Cookies.remove("book");
    Cookies.remove("requestedQty");
    router.push("/");
  };

  const handleConfirmCheckout = async () => {
    const res = await checkout(book._id, requestedQty);
    console.log(res);
    if (res.error) {
      toast(res.message, { type: "error" });
      if (res.message.includes("Balance is not enough")) {
        const goTopup = confirm("Do you want to topup?");
        if (goTopup) {
          router.push("/profile");
        }
      }
      return;
    }
    toast("Thanks for buying :)", { type: "success" });
    Cookies.remove("book");
    Cookies.remove("requestedQty");
    router.push("/");
  };

  return (
    <>
      <Head>
        <title>Checkout</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <Navbar onLanding={false} />
      <div className="top-0 left-0 flex overflow-hidden justify-center items-center">
        <div className="z-0 object-cover bg-darkgreen absolute top-0 h-full overflow-hidden">
          <Image
            src={"/assets/images/Library.webp"}
            alt=""
            width={4000}
            height={4000}
            className="opacity-50 object-right-bottom "
          />
        </div>

        <div
          className={`flex z-10 h-screen top-0 absolute items-center justify-center `}
        >
          <section
            className={` bg-white ${shadow} flex rounded-[1rem] gap-[20px] overflow-hidden`}
          >
            {/*images */}
            <div>
              <Image
                src={"/assets/images/TestPic.jpg"}
                alt={""}
                width={400}
                height={400}
                className="aspect-auto w-[300px] "
              />
            </div>
            <aside className="">
              <div className="flex flex-col py-[20px] pl-[20px] gap-[30px] pr-[50px] w-[400px]">
                <section className="flex flex-col">
                  <h1 className=" font-bold text-[30px]">Confirm Payment</h1>
                  <div>
                    <h1 className={`${labelStyle}`}>Judul :</h1>
                    <h2 className={`${contentStyle}`}>{book.title}</h2>
                  </div>
                  <div>
                    <h1 className={`${labelStyle}`}>Author</h1>
                    <h2 className={`${contentStyle}`}>{book.author}</h2>
                  </div>
                </section>
                <section className="flex flex-col gap-[5px] ">
                  <div className="flex items-end justify-between border-b-[1px] border-primary">
                    <h1 className="text-[30px]">Total :</h1>
                    <div className="flex items-end gap-[10px]">
                      <h1 className="text-[30px] -mb-[5px]">{requestedQty}</h1>
                      <p className="text[15px]">PCS</p>
                    </div>
                  </div>
                  <div className="flex justify-end gap-[30px] items-end overflow-hidden">
                    <h1 className=" text-[22px]">IDR</h1>
                    <h1 className=" text-[30px] bg-white flex">
                      {Intl.NumberFormat("id-ID").format(
                        requestedQty * book.price
                      )}
                    </h1>
                  </div>
                </section>

                <section className="flex justify-between">
                  <button
                    onClick={handleCancelCheckout}
                    className={`${buttonSizing} text-primary  bg-transparent hover:bg-darkgreen hover:bg-opacity-40`}
                  >
                    Cancel
                  </button>
                  <button
                    onClick={handleConfirmCheckout}
                    className={`${buttonSizing} bg-primary text-green hover:border-[#115542] hover:bg-[#115542]`}
                  >
                    Confirm
                  </button>
                </section>
              </div>
            </aside>
          </section>
        </div>
      </div>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { token, book, requestedQty } = context.req.cookies;

  if (!token) {
    return {
      redirect: {
        destination: "/login",
        permanent: false,
      },
    };
  }

  if (!book || !requestedQty) {
    context.res.setHeader("error", "Please select a book first");
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }

  return {
    props: {
      book: JSON.parse(book),
      requestedQty: parseInt(requestedQty),
    } as CheckoutTypes,
  };
};
