import Navbar from "@/components/organisms/Navbar";
import Image from "next/image";
import Head from "next/head";
import { getBookById } from "@/service/book";
import { BookTypes } from "@/types";
import { GetServerSideProps } from "next";
import { useRouter } from "next/router";
import { useState } from "react";
import Cookies from "js-cookie";
import { toast } from "react-toastify";

export default function BookDetail({ book }: { book: BookTypes }) {
  const router = useRouter();
  const shadow = "shadow-[-5px_0px_15px_8px_rgba(0,0,0,0.25)]";
  const btnstyle =
    "flex px-[10px] py-[0px] bg-white items-center justify-center w-[35px] h-[30px]";
  const [qtyValue, setQtyValue] = useState(1);
  const maxQty = book.qty;
  const totalPrice = qtyValue * book.price;

  const handlePlus = () => {
    if (qtyValue === maxQty) {
      toast("Sorry, we only have " + qtyValue + " books left", {
        type: "error",
      });
      return;
    }
    setQtyValue(qtyValue + 1);
  };

  const handleMinus = () => {
    if (qtyValue == 1) {
      toast("Sorry, you can't order less than 1 book", {
        type: "error",
      });
      return;
    }
    setQtyValue(qtyValue - 1);
  };

  const handleSubmit = () => {
    Cookies.set("book", JSON.stringify(book));
    Cookies.set("requestedQty", JSON.stringify(qtyValue));
    toast("Great, you can complete your payment!", { type: "success" });
    router.push("/checkout");
  };

  return (
    <>
      <Head>
        <title>{book && book.title}</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Navbar />
      <main className={` flex px-[60px] py-[65px] bg-[#FBF8F4] gap-[60px]`}>
        <section className="flex shrink-0">
          {" "}
          {/*Left */}
          <div className={` bg-[#d9d9d965] px-[40px] py-[20px] rounded-md `}>
            <Image
              src={`/assets/images/Book.png`}
              alt={""}
              height={300}
              width={300}
              className={`overflow-hidden aspect-auto w-[250px] rounded-lg ${shadow}`}
            />
          </div>
        </section>
        <section className="flex flex-col gap-[15px]">
          {/*Mid */}
          <section className="flex flex-col gap-[5px]">
            <h1 className="font-bold text-[30px]">
              {/*Title*/}
              {book.title}
            </h1>
            <h2 className="text-[15px]  text-[rgb(90,90,90)] font-semibold ">
              {/*Author*/}
              {book.author}
            </h2>
            <div>Rating</div>
            <div className="flex gap-[8px] text-[25px] ">
              <p className="font-semibold">IDR</p>
              <p className="font-semibold">{book.price.toLocaleString()}</p>
            </div>
          </section>
          <div className="flex flex-col">
            <h1 className="font-bold">Description</h1>
            <p className="text-justify">
              Lorem ipsum dolor sit, amet consectetur adipisicing elit. Eligendi
              corporis nobis ipsum itaque voluptatem molestiae quae sapiente
              magnam asperiores accusantium, molestias harum tenetur nemo
              explicabo in libero similique unde architecto aliquid? Saepe sequi
              quam voluptatibus recusandae, dolores obcaecati iste repudiandae
              vero architecto. Tempore magni ratione inventore sed quas iure
              minus commodi sapiente, enim itaque porro eos atque fuga
              laudantium. Veritatis ipsa veniam magni vel, sint rerum nulla,
              ipsum voluptatum nisi cum impedit! Sequi, ullam at, dolore in
              asperiores expedita pariatur illo laboriosam provident voluptatum
              ipsum non! Libero, soluta recusandae! Voluptatum iure temporibus
              quidem nulla reprehenderit soluta reiciendis recusandae libero
              sequi!
            </p>
          </div>

          <div>
            <h1 className="font-bold">Detail</h1>
            <section className="flex flex-col">
              <div className="flex flex-col">
                <h1 className="font-semibold">Jumlah Stok:</h1>
                <h2>{book.qty}</h2>
              </div>
            </section>
          </div>
        </section>
        <section>
          {/*Right */}
          <div
            className={`flex flex-col bg-white rounded-sm px-[18px] py-[25px] shadow-[0px_0px_20px_2px_rgba(0,0,0,0.15)] gap-[30px]  w-[300px] `}
          >
            <section className="flex flex-col gap-[15px] ">
              <h1 className="bg-white text-[22px]">Quantity</h1>
              <div className="flex items-center  ">
                <section className="flex rounded-md border-[1px] border-black overflow-hidden ">
                  <button
                    onClick={handleMinus}
                    className={`${btnstyle}  hover:bg-[rgba(0,0,0,0.16)] duration-[200ms] active:bg-[rgba(0,0,0,0.51)]`}
                  >
                    -
                  </button>
                  <input
                    className="flex items-center justify-center w-[50px] text-center bg-white border-x-[1px] border-black"
                    value={qtyValue < 10 ? `0${qtyValue}` : qtyValue}
                    max={book.qty}
                    disabled
                  ></input>
                  <button
                    onClick={handlePlus}
                    className={`${btnstyle}  hover:bg-[rgba(0,0,0,0.16)] duration-[200ms] active:bg-[rgba(0,0,0,0.51)] `}
                  >
                    +
                  </button>
                </section>
              </div>
            </section>

            <section className="font-semibold flex justify-between text-[22px] pt-[20px] border-t-black border-t-[1px]  ">
              <h1>Total :</h1>
              <div className="flex gap-[10px] font-bold">
                <h1>IDR</h1>
                <h1>{totalPrice.toLocaleString()}</h1>
              </div>
            </section>

            <div className="flex justify-end">
              <button
                onClick={handleSubmit}
                className="px-[15px] py-[10px] bg-white border-black border-[1px] hover:bg-[rgba(0,0,0,0.16)] duration-[200ms] active:bg-[rgba(0,0,0,0.51)]"
              >
                Buy Now
              </button>
            </div>
          </div>
        </section>
      </main>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { token } = context.req.cookies;

  const id = context.params?.id;

  if (!token) {
    return {
      redirect: {
        destination: "/login",
        permanent: false,
      },
    };
  }

  const res = await getBookById(id as string, token);

  if (res.message === "Book not found" || res.error) {
    return {
      redirect: {
        destination: "/404",
        permanent: false,
      },
    };
  }

  const { data } = res;

  return {
    props: { book: data },
  };
};
